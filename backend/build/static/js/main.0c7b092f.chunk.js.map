{"version":3,"sources":["redux/action.js","redux/type.js","components/search.js","components/word.js","app.js","redux/reducer.js","redux/store.js","index.js"],"names":["searchData","Word","dispatch","a","axios","data","type","payload","searchWord","console","log","error","response","Search","state","open","language","definition","isSubmitting","snackbarOpen","snackbarMessage","snackbarSeverity","handleChangeSearch","key","value","setState","props","filterWords","handleSubmitSearch","e","preventDefault","searchWordInDatabase","handleChangeWord","handleSubmitWord","addWord","message","showSnackbar","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","severity","variant","handleClickOpen","handleClose","Grid","className","container","spacing","alignItems","justify","item","noValidate","autoComplete","onSubmit","this","TextField","id","placeholder","fullWidth","onChange","target","Button","color","onClick","result","Card","metadata","provider","results","map","r","index","Divider","lexicalEntries","l","entries","etymologies","lexicalCategory","notes","text","senses","s","definitions","Dialog","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","label","DialogActions","disabled","Component","connect","searchReducer","word","method","url","newWord","allWords","w","_id","CircularProgress","App","searchText","searchWords","filter","indexOf","allWord","initialState","SearchReducer","action","newState","push","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOm","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c7b092f.chunk.js","sourcesContent":["import { SEARCHQUERY, ALLSEARCHWORD, ADDWORD } from './type';\r\nimport axios from 'axios'\r\n\r\nexport const searchData = (Word) => async (dispatch) => {\r\n    try {\r\n        const { data } = await axios(`http://localhost:3000/searchWord?searchWord=${Word}`);\r\n        dispatch({\r\n            type: SEARCHQUERY,\r\n            payload: {\r\n                searchWord: data\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch({\r\n            type: SEARCHQUERY,\r\n            payload: {\r\n                error: error.response.data.error\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const allWord = () => async dispatch => {\r\n    try {\r\n        const { data } = await axios(`http://localhost:3000/searchWord/All`)\r\n        dispatch({\r\n            type: ALLSEARCHWORD,\r\n            payload: { searchWords: data }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n\r\n    }\r\n}\r\n\r\nexport const addWord = (word) => async dispatch => {\r\n    try {\r\n        const { data } = await axios({\r\n            method: \"post\",\r\n            url: 'http://localhost:3000/searchWord/addword',\r\n            data: word,\r\n        }\r\n        );\r\n        console.log(data)\r\n        dispatch({\r\n            type: ADDWORD,\r\n            payload: {\r\n                newWord: data\r\n            }\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch({\r\n            type: ADDWORD,\r\n            payload: {\r\n                error: error.response.data.error\r\n            }\r\n        })\r\n\r\n    }\r\n}\r\n","export const SEARCHQUERY = \"SEARCHQUERY\";\r\nexport const ALLSEARCHWORD = \"ALLSEARCHWORD\";\r\nexport const ADDWORD = \"ADDWORD\";","import React, { Component } from 'react';\r\nimport { TextField, Grid, Divider, Card } from '@material-ui/core';\r\nimport { searchData, addWord } from '../redux/action'\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nclass Search extends Component {\r\n\r\n    state = {\r\n        Word: \"\",\r\n        open: false,\r\n        searchWord: \"\",\r\n        language: \"\",\r\n        definition: \"\",\r\n        isSubmitting: false,\r\n        error: '',\r\n        snackbarOpen: false,\r\n        snackbarMessage: \"\",\r\n        snackbarSeverity: \"success\"\r\n    }\r\n    handleChangeSearch = (key, value) => {\r\n        this.setState({\r\n            [key]: value\r\n        }, () => {\r\n            this.props.filterWords(this.state.Word)\r\n        });\r\n        if (!this.props.filterWords) {\r\n\r\n        }\r\n    }\r\n    handleSubmitSearch = async (e) => {\r\n        e.preventDefault();\r\n        this.props.searchWordInDatabase(this.state.Word);\r\n    }\r\n    handleChangeWord = (key, value) => {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n    }\r\n    handleSubmitWord = async (e) => {\r\n        e.preventDefault();\r\n        this.setState({ ...this.state, isSubmitting: true });\r\n        await this.props.addWord({\r\n            searchWord: this.state.searchWord,\r\n            language: this.state.language,\r\n            definition: this.state.definition\r\n        });\r\n        this.setState({ ...this.state, isSubmitting: false, open: false });\r\n        console.log(this.props)\r\n        if (this.props.data.error) {\r\n            this.setState({ ...this.state, open: true })\r\n            if (this.props.data.error) {\r\n                this.setState({\r\n                    snackbarOpen: true,\r\n                    snackbarMessage: this.props.data.error,\r\n                    snackbarSeverity: 'error'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    snackbarOpen: true,\r\n                    snackbarMessage: this.props.data.message\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    showSnackbar = () => {\r\n        return <Snackbar\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            open={this.state.snackbarOpen}\r\n            onClose={() => { this.setState({ snackbarOpen: false }) }}\r\n            autoHideDuration={3000}\r\n        >\r\n            <MuiAlert severity={this.state.snackbarSeverity} variant=\"filled\">\r\n                {this.state.snackbarMessage}\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    }\r\n    handleClickOpen = () => {\r\n        this.setState({\r\n            open: true\r\n        });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <Grid className=\"search-bar\" container spacing={1} alignItems=\"center\" justify=\"space-around\">\r\n                    <Grid item >\r\n                        <form noValidate autoComplete=\"off\" onSubmit={this.handleSubmitSearch}>\r\n                            <TextField id=\"standard-basic\" placeholder=\"Search text...\" fullWidth value={this.state.Word} onChange={(e) => this.handleChangeSearch(\"Word\", e.target.value)} />\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item >\r\n                        <div   >\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                                Add Word\r\n                </Button>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid>\r\n                    {this.props.data?.result &&\r\n                        <Card className=\"card-body\">\r\n                            <h1>\r\n                                Search key:{this.props.data.result.id}\r\n                            </h1>\r\n                            <h3>Provider: {this.props.data.result.metadata.provider}</h3>\r\n                            {this.props.data.result.results.map((r, index) => (\r\n                                <div key={index}>\r\n                                    <Grid >\r\n                                        <Grid item>\r\n                                            Language: {r.language}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            Type: {r.type}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Divider />\r\n                                    {\r\n                                        r.lexicalEntries?.map((l, index) => (\r\n                                            <div key={index}>\r\n                                                <p>\r\n                                                    Etymologies:{l.entries[0]?.etymologies}\r\n                                                </p>\r\n                                                <h3>\r\n                                                    LexicalCategory:{l.lexicalCategory.id}\r\n                                                </h3>\r\n                                                {l.entries[0]?.notes &&\r\n                                                    <p>Notes: {l.entries[0]?.notes[0].text}</p>\r\n                                                }\r\n                                                <div>\r\n                                                    {l.entries[0].senses?.map((s, index) => (\r\n                                                        <p key={index}>\r\n                                                            Definitions:{s.definitions}\r\n                                                        </p>\r\n                                                    ))}\r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n\r\n                            ))}\r\n                        </Card>}\r\n\r\n                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"searchWord\"\r\n                                label=\"Word\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                onChange={(e) => this.handleChangeWord(\"searchWord\", e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                id=\"language\"\r\n                                label=\"language\"\r\n                                type=\"language\"\r\n                                fullWidth\r\n                                onChange={(e) => this.handleChangeWord(\"language\", e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                id=\"definition\"\r\n                                label=\"definition\"\r\n                                type=\"definition\"\r\n                                fullWidth\r\n                                onChange={(e) => this.handleChangeWord(\"definition\", e.target.value)}\r\n                            />\r\n\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={this.handleClose} color=\"primary\">\r\n                                Cancel\r\n                    </Button>\r\n                            <Button onClick={this.handleSubmitWord} disabled={this.state.isSubmitting} color=\"primary\">\r\n                                Submit\r\n                    </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    {this.showSnackbar()}\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.searchReducer\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { searchData, addWord })(Search);","import React, { Component } from 'react';\r\nimport { Grid, Divider, Card } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nclass Word extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.allWords ?\r\n                    < div >\r\n                        {\r\n                            this.props.allWords && this.props.allWords.map((w) => (\r\n                                <div key={w._id}>\r\n                                    <Card className=\"all-search-word\" >\r\n                                        <h1>\r\n                                            Search key:{w.result.id}\r\n                                        </h1>\r\n                                        <h3>Provider: {w.result.metadata.provider}</h3>\r\n                                        {w.result.results.map((r, index) => (\r\n                                            <div key={index}>\r\n                                                <Grid >\r\n                                                    <Grid item>\r\n                                                        Language: {r.language}\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        Type: {r.type}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Divider />\r\n                                                {\r\n                                                    r.lexicalEntries?.map((l, index) => (\r\n                                                        <div key={index}>\r\n                                                            <p>\r\n                                                                Etymologies:{l.entries[0]?.etymologies}\r\n                                                            </p>\r\n                                                            {l.lexicalCategory &&\r\n                                                                <h3>\r\n                                                                    LexicalCategory:{l.lexicalCategory.id}\r\n                                                                </h3>\r\n                                                            }\r\n                                                            {l.entries[0]?.notes &&\r\n                                                                <p>Notes: {l.entries[0]?.notes[0].text}</p>\r\n                                                            }\r\n                                                            <div>\r\n                                                                {l.entries[0].senses?.map((s, index) => (\r\n                                                                    <p key={index}>\r\n                                                                        Definitions:{s.definitions}\r\n                                                                    </p>\r\n                                                                ))}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    ))\r\n                                                }\r\n                                            </div>\r\n\r\n                                        ))}\r\n\r\n                                    </Card>\r\n                                </div>\r\n                            ))\r\n                        }\r\n\r\n                    </div>\r\n                    : <div className=\"loader\">\r\n                        <CircularProgress />\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Word;","import React, { Component } from 'react';\r\nimport Search from './components/search';\r\nimport Word from './components/word';\r\nimport { allWord, searchData } from './redux/action';\r\nimport { connect } from 'react-redux';\r\nclass App extends Component {\r\n    state = {\r\n        data: null\r\n    }\r\n    async componentDidMount() {\r\n        await this.props.allWord();\r\n        await this.setState({ data: this.props.data.searchWords });\r\n        //console.log(this.props.data.searchWords);\r\n    }\r\n    filterWords = (searchText) => {\r\n        const data = this.props.data.searchWords.filter((word) => word.searchWord.indexOf(searchText) !== -1)\r\n        this.setState({ data });\r\n    }\r\n    searchWordInDatabase = async (searchWord) => {\r\n        await this.props.searchData(searchWord);\r\n        this.filterWords(searchWord);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"all-body\">\r\n                <Search searchWordInDatabase={this.searchWordInDatabase} filterWords={this.filterWords} />\r\n                <Word allWords={this.state.data} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        data: state.searchReducer\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { allWord, searchData })(App);\r\n\r\n","import { SEARCHQUERY, ALLSEARCHWORD, ADDWORD } from './type';\r\nconst initialState = {\r\n    searchWords: null,\r\n    searchWord: null,\r\n    newWord: null\r\n};\r\n\r\nconst SearchReducer = (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    let newState = { ...state };\r\n    switch (type) {\r\n        case SEARCHQUERY:\r\n            newState.searchWord = payload.searchWord;\r\n            if (newState.searchWords) {\r\n                newState.searchWords.push(payload.searchWord);\r\n            }\r\n            return newState;\r\n        case ALLSEARCHWORD:\r\n            newState.searchWords = payload.searchWords;\r\n            return newState;\r\n        case ADDWORD:\r\n            newState.newWord = payload.newWord;\r\n            if (newState.searchWords) {\r\n                newState.searchWords.push(payload.newWord);\r\n            }\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default SearchReducer;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport searchReducer from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({ searchReducer })\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOm from 'react-dom';\r\nimport App from './app';\r\nimport './style/style.css';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOm.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById(\"root\"));"],"sourceRoot":""}